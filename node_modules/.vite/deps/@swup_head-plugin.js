import "./chunk-LXYNHJXE.js";

// node_modules/@swup/plugin/dist/index.modern.js
function r() {
  return r = Object.assign ? Object.assign.bind() : function(r3) {
    for (var n3 = 1; n3 < arguments.length; n3++) {
      var e2 = arguments[n3];
      for (var t2 in e2)
        Object.prototype.hasOwnProperty.call(e2, t2) && (r3[t2] = e2[t2]);
    }
    return r3;
  }, r.apply(this, arguments);
}
var n = (r3) => String(r3).split(".").map((r4) => String(parseInt(r4 || "0", 10))).concat(["0", "0"]).slice(0, 3).join(".");
var e = class {
  constructor() {
    this.isSwupPlugin = true, this.swup = void 0, this.version = void 0, this.requires = {}, this.handlersToUnregister = [];
  }
  mount() {
  }
  unmount() {
    this.handlersToUnregister.forEach((r3) => r3()), this.handlersToUnregister = [];
  }
  _beforeMount() {
    if (!this.name)
      throw new Error("You must define a name of plugin when creating a class.");
  }
  _afterUnmount() {
  }
  _checkRequirements() {
    return "object" != typeof this.requires || Object.entries(this.requires).forEach(([r3, e2]) => {
      if (!function(r4, e3, t2) {
        const s2 = function(r5, n3) {
          var e4;
          if ("swup" === r5)
            return null != (e4 = n3.version) ? e4 : "";
          {
            var t3;
            const e5 = n3.findPlugin(r5);
            return null != (t3 = null == e5 ? void 0 : e5.version) ? t3 : "";
          }
        }(r4, t2);
        return !!s2 && ((r5, e4) => e4.every((e5) => {
          const [, t3, s3] = e5.match(/^([\D]+)?(.*)$/) || [];
          var o, i2;
          return ((r6, n3) => {
            const e6 = { "": (r7) => 0 === r7, ">": (r7) => r7 > 0, ">=": (r7) => r7 >= 0, "<": (r7) => r7 < 0, "<=": (r7) => r7 <= 0 };
            return (e6[n3] || e6[""])(r6);
          })((i2 = s3, o = n(o = r5), i2 = n(i2), o.localeCompare(i2, void 0, { numeric: true })), t3 || ">=");
        }))(s2, e3);
      }(r3, e2 = Array.isArray(e2) ? e2 : [e2], this.swup)) {
        const n3 = `${r3} ${e2.join(", ")}`;
        throw new Error(`Plugin version mismatch: ${this.name} requires ${n3}`);
      }
    }), true;
  }
  on(r3, n3, e2 = {}) {
    var t2;
    n3 = !(t2 = n3).name.startsWith("bound ") || t2.hasOwnProperty("prototype") ? n3.bind(this) : n3;
    const s2 = this.swup.hooks.on(r3, n3, e2);
    return this.handlersToUnregister.push(s2), s2;
  }
  once(n3, e2, t2 = {}) {
    return this.on(n3, e2, r({}, t2, { once: true }));
  }
  before(n3, e2, t2 = {}) {
    return this.on(n3, e2, r({}, t2, { before: true }));
  }
  replace(n3, e2, t2 = {}) {
    return this.on(n3, e2, r({}, t2, { replace: true }));
  }
  off(r3, n3) {
    return this.swup.hooks.off(r3, n3);
  }
};

// node_modules/@swup/head-plugin/dist/index.modern.js
function t() {
  return t = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = arguments[t2];
      for (var n3 in s2)
        Object.prototype.hasOwnProperty.call(s2, n3) && (e2[n3] = s2[n3]);
    }
    return e2;
  }, t.apply(this, arguments);
}
function s(e2) {
  return "title" !== e2.localName && !e2.matches("[data-swup-theme]");
}
function n2(e2, t2) {
  return e2.outerHTML === t2.outerHTML;
}
function r2(e2) {
  return e2.matches("link[rel=stylesheet][href]");
}
var i = class extends e {
  constructor(e2 = {}) {
    var i2;
    super(), i2 = this, this.name = "SwupHeadPlugin", this.requires = { swup: ">=4" }, this.defaults = { persistTags: false, persistAssets: false, awaitAssets: false, timeout: 3e3 }, this.options = void 0, this.updateHead = async function(e3, { page: { html: t2 } }) {
      const o = new DOMParser().parseFromString(t2, "text/html"), { removed: a, added: l } = function(e4, t3, { shouldPersist: r3 = () => false } = {}) {
        const i3 = Array.from(e4.children), o2 = Array.from(t3.children), a2 = (l2 = i3, o2.reduce((e5, t4, s2) => (l2.some((e6) => n2(t4, e6)) || e5.push({ el: t4, index: s2 }), e5), []));
        var l2;
        const u2 = function(e5, t4) {
          return e5.reduce((e6, s2) => (t4.some((e7) => n2(s2, e7)) || e6.push({ el: s2 }), e6), []);
        }(i3, o2);
        return u2.reverse().filter(({ el: e5 }) => s(e5)).filter(({ el: e5 }) => !r3(e5)).forEach(({ el: t4 }) => e4.removeChild(t4)), a2.filter(({ el: e5 }) => s(e5)).forEach(({ el: t4, index: s2 = 0 }) => {
          e4.insertBefore(t4, e4.children[s2 + 1] || null);
        }), { removed: u2.map(({ el: e5 }) => e5), added: a2.map(({ el: e5 }) => e5) };
      }(document.head, o.head, { shouldPersist: (e4) => i2.isPersistentTag(e4) });
      i2.swup.log(`Removed ${a.length} / added ${l.length} tags in head`);
      const u = (c = document.documentElement).lang !== (d = o.documentElement).lang ? (c.lang = d.lang, c.lang) : null;
      var c, d;
      if (u && i2.swup.log(`Updated lang attribute: ${u}`), i2.options.awaitAssets) {
        const e4 = function(e5, t3 = 0) {
          return e5.filter(r2).map((e6) => function(e7, t4 = 0) {
            const s2 = (t5) => {
              (({ href: e8 }) => Array.from(document.styleSheets).map(({ href: e9 }) => e9).includes(e8))(e7) ? t5() : setTimeout(() => s2(t5), 10);
            };
            return new Promise((e8) => {
              s2(e8), t4 > 0 && setTimeout(e8, t4);
            });
          }(e6, t3));
        }(l, i2.options.timeout);
        e4.length && (i2.swup.log(`Waiting for ${e4.length} assets to load`), await Promise.all(e4));
      }
    }, this.options = t({}, this.defaults, e2), this.options.persistAssets && !this.options.persistTags && (this.options.persistTags = "link[rel=stylesheet], script[src], style");
  }
  mount() {
    this.before("content:replace", this.updateHead);
  }
  isPersistentTag(e2) {
    const { persistTags: t2 } = this.options;
    return "function" == typeof t2 ? t2(e2) : "string" == typeof t2 ? e2.matches(t2) : Boolean(t2);
  }
};
export {
  i as default
};
//# sourceMappingURL=@swup_head-plugin.js.map
